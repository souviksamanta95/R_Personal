ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=factor(Total_Production)))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production)+
ggplot(rice_str, aes(Total_Production))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production))+
geom_histogram(color="black") + theme_classic()
rice_str <- gather(rice_new, key = "State_Name", value = "Total_Production",c(-Crop_Year))
ggplot(rice_str, aes(Total_Production,Crop_Year))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production,Crop_Year))+
geom_step(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_step(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production,size = Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=sum(Total_Production)))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production, color = State_Name))+
geom_point() + theme_classic()
rice_str %>% filter(Crop=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_point() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_point() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_bar() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(x=Crop_Year,y=Total_Production))+
geom_bar() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(x=Crop_Year,y=Total_Production))+
geom_bar(stat=identify()) + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Total_Production))+
geom_bar(stat="identify") + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Total_Production))+
geom_bar(stat="identity") + theme_classic()
rice_str <- gather(rice_new, key = "State_Name", value = "Production",c(-Crop_Year))
rice_str %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "blue") + theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") + theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Bihar") +
theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Bihar") +
theme_classic()
# Year-wise rice production for Uttar Pradesh -
rice_str %>% filter(State_Name=="Uttar Pradesh") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Uttar Pradesh") +
theme_classic()
# Year-wise rice production for Assam -
rice_str %>% filter(State_Name=="Assam") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Assam") +
theme_classic()
# Year-wise rice production for Odisha -
rice_str %>% filter(State_Name=="Odisha") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Odisha") +
theme_classic()
# Year-wise rice production for Karnataka -
rice_str %>% filter(State_Name=="Karnataka") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Karnataka") +
theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production, color = State_Name))+
geom_point() + theme_classic()
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
#View(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
library(tidyr)
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr <- spread(d_year, key = "State_Name", value = "Total_Production" )
y_2005 <- d1 %>% filter(Crop_Year==2005)
y_2005 <- d1 %>% filter(Crop_Year==2005)
y_2005_crop <- y_2005 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(y_2005_crop)
rice <- d1 %>% filter(Crop=="Rice")
rice_state <- rice %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr_rice <- spread(rice_state, key = "State_Name", value = "Total_Production" )
dim(yrr_rice)
sum(is.na(yrr_rice))
# Year wise missing values - in the data we can see so many missing values in 2015, so we should remove record for 2015 which is the last row
nrow(yrr_rice)
yrr_rice <- yrr_rice[-19,]
# State wise missing values ---
sapply(yrr_rice, function(x)sum(is.na(x)))
rice_new <- yrr_rice %>% select(-`Andaman and Nicobar Islands`,-Jharkhand)
sum(is.na(rice_new))
sapply(rice_new, function(x)sum(is.na(x)))
library(imputeTS)
rice_new <- na_mean(rice_new)
sum(is.na(rice_new))
library(ggplot2)
rice_str <- gather(rice_new, key = "State_Name", value = "Production",c(-Crop_Year))
View(y_2005)
install.packages(c("gains", "raster", "sandwich", "sp", "usdm"))
library(readr)
data <- read_csv(url("https://github.com/imi-insight/InSession/blob/master/Linear%20Regression/Datasets/multipleChoiceResponses.csv"))
View(data)
data <- read_csv(url("Linear Regression/Datasets/multipleChoiceResponses.csv"))
data <- read_csv(url("https://github.com/imi-insight/InSession/blob/master/Linear%20Regression/Datasets/multipleChoiceResponses.csv"))
View(data)
data <- read_csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/multipleChoiceResponses.csv"))
schema <- read_csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/schema.csv"))
knitr::opts_chunk$set(echo = TRUE)
cat("\014")    # to clear console to CTRL+L
rm(list=ls())
library(dplyr)
library (readr)
data<-read.csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/multipleChoiceResponses.csv"))
schema=read.csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/schema.csv"))
schema
names(schema)
levels(as.factor(schema$Asked))
library(sqldf)
col=data.frame(sqldf("Select Column from schema where Asked = 'All'"))
col_all=col[,1]
col_all
library(dplyr)
cols=c("GenderSelect","Country","Age","EmploymentStatus","StudentStatus",
"LearningDataScience","CodeWriter","CareerSwitcher",
"CurrentJobTitleSelect","CurrentEmployerType","MLToolNextYearSelect",
"MLMethodNextYearSelect","LanguageRecommendationSelect","PublicDatasetsSelect","LearningPlatformSelect",
"LearningPlatformUsefulnessArxiv","LearningPlatformUsefulnessBlogs","LearningPlatformUsefulnessCollege",
"LearningPlatformUsefulnessCompany","LearningPlatformUsefulnessConferences","LearningPlatformUsefulnessFriends",
"LearningPlatformUsefulnessKaggle","LearningPlatformUsefulnessNewsletters","LearningPlatformUsefulnessCommunities",
"LearningPlatformUsefulnessDocumentation","LearningPlatformUsefulnessCourses","LearningPlatformUsefulnessProjects",
"LearningPlatformUsefulnessPodcasts","LearningPlatformUsefulnessSO","LearningPlatformUsefulnessTextbook",
"LearningPlatformUsefulnessTradeBook","LearningPlatformUsefulnessTutoring","LearningPlatformUsefulnessYouTube",
"BlogsPodcastsNewslettersSelect","LearningDataScienceTime","JobSkillImportanceBigData","JobSkillImportanceDegree",
"JobSkillImportanceStats","JobSkillImportanceEnterpriseTools","JobSkillImportancePython","JobSkillImportanceR",
"JobSkillImportanceSQL","JobSkillImportanceKaggleRanking","JobSkillImportanceMOOC","JobSkillImportanceVisualizations",
"HardwarePersonalProjectsSelect","TimeSpentStudying","ProveKnowledgeSelect","DataScienceIdentitySelect",
"FormalEducation","MajorSelect","Tenure","PastJobTitlesSelect","FirstTrainingSelect","LearningCategorySelftTaught",
"LearningCategoryOnlineCourses","LearningCategoryWork","LearningCategoryUniversity","LearningCategoryKaggle",
"MLSkillsSelect","MLTechniquesSelect","ParentsEducation","EmployerIndustry","EmployerSize","EmployerSizeChange",
"EmployerMLTime","EmployerSearchMethod","UniversityImportance","JobFunctionSelect","WorkHardwareSelect",
"WorkDataTypeSelect","WorkProductionFrequency","WorkDatasetSize","WorkAlgorithmsSelect","WorkToolsSelect",
"WorkToolsFrequencyAmazonML","WorkToolsFrequencyAWS","WorkToolsFrequencyAngoss","WorkToolsFrequencyC","WorkToolsFrequencyCloudera",
"WorkToolsFrequencyDataRobot","WorkToolsFrequencyFlume","WorkToolsFrequencyGCP","WorkToolsFrequencyHadoop","WorkToolsFrequencyIBMCognos",
"WorkToolsFrequencyIBMSPSSModeler","WorkToolsFrequencyIBMSPSSStatistics","WorkToolsFrequencyIBMWatson","WorkToolsFrequencyImpala",
"WorkToolsFrequencyJava","WorkToolsFrequencyJulia","WorkToolsFrequencyJupyter","WorkToolsFrequencyKNIMECommercial","WorkToolsFrequencyKNIMEFree",
"WorkToolsFrequencyMathematica","WorkToolsFrequencyMATLAB","WorkToolsFrequencyAzure","WorkToolsFrequencyExcel",
"WorkToolsFrequencyMicrosoftRServer","WorkToolsFrequencyMicrosoftSQL","WorkToolsFrequencyMinitab","WorkToolsFrequencyNoSQL",
"WorkToolsFrequencyOracle","WorkToolsFrequencyOrange","WorkToolsFrequencyPerl","WorkToolsFrequencyPython",
"WorkToolsFrequencyQlik","WorkToolsFrequencyR","WorkToolsFrequencyRapidMinerCommercial","WorkToolsFrequencyRapidMinerFree",
"WorkToolsFrequencySalfrod","WorkToolsFrequencySAPBusinessObjects","WorkToolsFrequencySASBase","WorkToolsFrequencySASEnterprise",
"WorkToolsFrequencySASJMP","WorkToolsFrequencySpark","WorkToolsFrequencySQL","WorkToolsFrequencyStan",
"WorkToolsFrequencyStatistica","WorkToolsFrequencyTableau","WorkToolsFrequencyTensorFlow","WorkToolsFrequencyTIBCO",
"WorkToolsFrequencyUnix","WorkMethodsSelect","WorkMethodsFrequencyAssociationRules",
"WorkMethodsFrequencyBayesian","WorkMethodsFrequencyCNNs","WorkMethodsFrequencyCollaborativeFiltering",
"WorkMethodsFrequencyDataVisualization","WorkMethodsFrequencyDecisionTrees",
"WorkMethodsFrequencyEnsembleMethods","WorkMethodsFrequencyEvolutionaryApproaches","WorkMethodsFrequencyGANs","WorkMethodsFrequencyGBM","WorkMethodsFrequencyHMMs",
"WorkMethodsFrequencyKNN","WorkMethodsFrequencyLiftAnalysis","WorkMethodsFrequencyLogisticRegression","WorkMethodsFrequencyMLN","WorkMethodsFrequencyNaiveBayes",
"WorkMethodsFrequencyNLP","WorkMethodsFrequencyNeuralNetworks","WorkMethodsFrequencyPCA","WorkMethodsFrequencyPrescriptiveModeling",
"WorkMethodsFrequencyRandomForests","WorkMethodsFrequencyRecommenderSystems","WorkMethodsFrequencyRNNs",
"WorkMethodsFrequencySegmentation","WorkMethodsFrequencySimulation","WorkMethodsFrequencySVMs","WorkMethodsFrequencyTextAnalysis",
"WorkMethodsFrequencyTimeSeriesAnalysis","WorkMethodsFrequencySelect1","WorkMethodsFrequencySelect2","WorkMethodsFrequencySelect3",
"TimeGatheringData","TimeModelBuilding","TimeProduction","TimeVisualizing","TimeFindingInsights",
"AlgorithmUnderstandingLevel","WorkChallengesSelect","WorkChallengeFrequencyDeployment","CompensationAmount","CompensationCurrency")
useful_df=data %>% select(cols)
View(useful_df)
knitr::opts_chunk$set(echo = TRUE)
cat("\014")    # to clear console to CTRL+L
rm(list=ls())
library(dplyr)
library (readr)
data<-read.csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/multipleChoiceResponses.csv"))
schema=read.csv(url("https://raw.githubusercontent.com/imi-insight/InSession/master/Linear%20Regression/Datasets/schema.csv"))
schema
names(schema)
levels(as.factor(schema$Asked))
library(sqldf)
col=data.frame(sqldf("Select Column from schema where Asked = 'All'"))
col_all=col[,1]
col_all
library(dplyr)
cols=c("GenderSelect","Country","Age","EmploymentStatus","StudentStatus",
"LearningDataScience","CodeWriter","CareerSwitcher",
"CurrentJobTitleSelect","CurrentEmployerType","MLToolNextYearSelect",
"MLMethodNextYearSelect","LanguageRecommendationSelect","PublicDatasetsSelect","LearningPlatformSelect",
"LearningPlatformUsefulnessArxiv","LearningPlatformUsefulnessBlogs","LearningPlatformUsefulnessCollege",
"LearningPlatformUsefulnessCompany","LearningPlatformUsefulnessConferences","LearningPlatformUsefulnessFriends",
"LearningPlatformUsefulnessKaggle","LearningPlatformUsefulnessNewsletters","LearningPlatformUsefulnessCommunities",
"LearningPlatformUsefulnessDocumentation","LearningPlatformUsefulnessCourses","LearningPlatformUsefulnessProjects",
"LearningPlatformUsefulnessPodcasts","LearningPlatformUsefulnessSO","LearningPlatformUsefulnessTextbook",
"LearningPlatformUsefulnessTradeBook","LearningPlatformUsefulnessTutoring","LearningPlatformUsefulnessYouTube",
"BlogsPodcastsNewslettersSelect","LearningDataScienceTime","JobSkillImportanceBigData","JobSkillImportanceDegree",
"JobSkillImportanceStats","JobSkillImportanceEnterpriseTools","JobSkillImportancePython","JobSkillImportanceR",
"JobSkillImportanceSQL","JobSkillImportanceKaggleRanking","JobSkillImportanceMOOC","JobSkillImportanceVisualizations",
"HardwarePersonalProjectsSelect","TimeSpentStudying","ProveKnowledgeSelect","DataScienceIdentitySelect",
"FormalEducation","MajorSelect","Tenure","PastJobTitlesSelect","FirstTrainingSelect","LearningCategorySelftTaught",
"LearningCategoryOnlineCourses","LearningCategoryWork","LearningCategoryUniversity","LearningCategoryKaggle",
"MLSkillsSelect","MLTechniquesSelect","ParentsEducation","EmployerIndustry","EmployerSize","EmployerSizeChange",
"EmployerMLTime","EmployerSearchMethod","UniversityImportance","JobFunctionSelect","WorkHardwareSelect",
"WorkDataTypeSelect","WorkProductionFrequency","WorkDatasetSize","WorkAlgorithmsSelect","WorkToolsSelect",
"WorkToolsFrequencyAmazonML","WorkToolsFrequencyAWS","WorkToolsFrequencyAngoss","WorkToolsFrequencyC","WorkToolsFrequencyCloudera",
"WorkToolsFrequencyDataRobot","WorkToolsFrequencyFlume","WorkToolsFrequencyGCP","WorkToolsFrequencyHadoop","WorkToolsFrequencyIBMCognos",
"WorkToolsFrequencyIBMSPSSModeler","WorkToolsFrequencyIBMSPSSStatistics","WorkToolsFrequencyIBMWatson","WorkToolsFrequencyImpala",
"WorkToolsFrequencyJava","WorkToolsFrequencyJulia","WorkToolsFrequencyJupyter","WorkToolsFrequencyKNIMECommercial","WorkToolsFrequencyKNIMEFree",
"WorkToolsFrequencyMathematica","WorkToolsFrequencyMATLAB","WorkToolsFrequencyAzure","WorkToolsFrequencyExcel",
"WorkToolsFrequencyMicrosoftRServer","WorkToolsFrequencyMicrosoftSQL","WorkToolsFrequencyMinitab","WorkToolsFrequencyNoSQL",
"WorkToolsFrequencyOracle","WorkToolsFrequencyOrange","WorkToolsFrequencyPerl","WorkToolsFrequencyPython",
"WorkToolsFrequencyQlik","WorkToolsFrequencyR","WorkToolsFrequencyRapidMinerCommercial","WorkToolsFrequencyRapidMinerFree",
"WorkToolsFrequencySalfrod","WorkToolsFrequencySAPBusinessObjects","WorkToolsFrequencySASBase","WorkToolsFrequencySASEnterprise",
"WorkToolsFrequencySASJMP","WorkToolsFrequencySpark","WorkToolsFrequencySQL","WorkToolsFrequencyStan",
"WorkToolsFrequencyStatistica","WorkToolsFrequencyTableau","WorkToolsFrequencyTensorFlow","WorkToolsFrequencyTIBCO",
"WorkToolsFrequencyUnix","WorkMethodsSelect","WorkMethodsFrequencyAssociationRules",
"WorkMethodsFrequencyBayesian","WorkMethodsFrequencyCNNs","WorkMethodsFrequencyCollaborativeFiltering",
"WorkMethodsFrequencyDataVisualization","WorkMethodsFrequencyDecisionTrees",
"WorkMethodsFrequencyEnsembleMethods","WorkMethodsFrequencyEvolutionaryApproaches","WorkMethodsFrequencyGANs","WorkMethodsFrequencyGBM","WorkMethodsFrequencyHMMs",
"WorkMethodsFrequencyKNN","WorkMethodsFrequencyLiftAnalysis","WorkMethodsFrequencyLogisticRegression","WorkMethodsFrequencyMLN","WorkMethodsFrequencyNaiveBayes",
"WorkMethodsFrequencyNLP","WorkMethodsFrequencyNeuralNetworks","WorkMethodsFrequencyPCA","WorkMethodsFrequencyPrescriptiveModeling",
"WorkMethodsFrequencyRandomForests","WorkMethodsFrequencyRecommenderSystems","WorkMethodsFrequencyRNNs",
"WorkMethodsFrequencySegmentation","WorkMethodsFrequencySimulation","WorkMethodsFrequencySVMs","WorkMethodsFrequencyTextAnalysis",
"WorkMethodsFrequencyTimeSeriesAnalysis","WorkMethodsFrequencySelect1","WorkMethodsFrequencySelect2","WorkMethodsFrequencySelect3",
"TimeGatheringData","TimeModelBuilding","TimeProduction","TimeVisualizing","TimeFindingInsights",
"AlgorithmUnderstandingLevel","WorkChallengesSelect","WorkChallengeFrequencyDeployment","CompensationAmount","CompensationCurrency")
useful_df=data %>% select(cols)
p1 <- ggplot(data, aes(x=Budget, y=`Box Office Collection`))
getwd()
setwd("C:/Users/souvi/Documents/R/Insight/Bollywood data")
library(readxl)
excel_sheets("Bollywood Data.xlsx")
data <- read_xlsx("Bollywood Data.xlsx", sheet = "Bollywood Data")
head(data)
str(data)
summary(data)
data$`Release Date` <-  as.Date(data$`Release Date`)
unique(data$`Release Date (N / LW / Festive)`)
data$`Release Date (N / LW / Festive)` <- factor(data$`Release Date (N / LW / Festive)`, levels = c("LW","N","HS","FS"), labels = c("Long weekend", "Normal", "Holiday season", "Festive season") )
unique(data$`Genre - Defined`)
data$`Genre - Defined` <- factor(data$`Genre - Defined`, levels = c("Romance" ,"Thriller","Comedy","Drama","Action"))
sapply(data, function(x)sum(is.na(x)))
which(is.na(data$`S No`))
which(is.na(data$`Release Date`))
which(is.na(data$`Movie Name`))
which(is.na(data$`Release Date (N / LW / Festive)`))
which(is.na(data$`Genre - Defined`))
which(is.na(data$Budget))
which(is.na(data$`Youtube Views`))
which(is.na(data$`Youtube Likes`))
which(is.na(data$`Youtube Dislikes`))
nrow(data)
data <- data[-150,]
nrow(data)
sum(is.na(data))
names(data)
cvp <- data%>% select(Budget,`Box Office Collection`,`Youtube Views`,`Youtube Likes`,`Youtube Dislikes`)
cvp<-data.frame(cvp)
cvp
m <- cor(cvp)
m
library(ggplot2)
p1 <- ggplot(data, aes(x=Budget, y=`Box Office Collection`))
p1 + geom_point(aes(color=`Genre - Defined`))
p1 + geom_point(aes(color=`Genre - Defined`, size = `Youtube Views`))
p1 + geom_point(aes(color=`Genre - Defined`, shape = `Release Date (N / LW / Festive)`))
p2 <- ggplot(data, aes(x=`Youtube Views`, y=`Box Office Collection`))
p2 +  geom_point(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p2 +  geom_smooth(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p3 <- ggplot(data, aes(x=`Release Date (N / LW / Festive)`,y=`Box Office Collection`))
p3 +  geom_bar(stat = "identity", aes(fill=`Genre - Defined`))
p3 +  geom_bar(stat = "identity", fill = "light blue")+
facet_grid(`Genre - Defined`~.,scales = "free")+ theme_classic()
p4 <- ggplot(data, aes(x=mean(`Release Date (N / LW / Festive)`),y=`Box Office Collection`))
p4 +  geom_bar(stat = "identity", aes(fill=`Genre - Defined`))
View(data)
data %>% group_by(Genre = `Genre - Defined`)
library(dplyr)
data %>% group_by(Genre = `Genre - Defined`)
p4 <- data %>% group_by(Genre = `Genre - Defined`)
View(p4)
head(data)
names(data)
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Total))
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean)) %>%
ggplot(aes(Mean))+geom_bar(stat = "identity", fill = "light blue")
p4 <- +geom_bar(stat = "identity", fill = "light blue")
p4 +geom_bar(stat = "identity", fill = "light blue")
p4 + geom_bar(stat = "identity", fill = "light blue")
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean)) %>%
ggplot(aes(Mean))
p4 + geom_bar(stat = "identity", fill = "light blue")
View(p3)
View(p4)
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
ggplot(p4,aes(Mean) + geom_bar(stat = "identity", fill = "light blue")
ggplot(p4,aes(Mean)) + geom_bar(stat = "identity", fill = "light blue")
View(p4)
ggplot(p4,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")
# Mean Budget by Genre
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(Budget)) %>% arrange(desc(Mean))
# Mean Budget by Genre
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(Budget)) %>% arrange(desc(Mean))
ggplot(p4,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")
# Mean box office collection by Genre
p5 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
ggplot(p5,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")
# Youtube views by Genre
p6 <- ggplot(data, aes(x=`Genre - Defined`,y=`Youtube Views`))
p6 + geom_bar(stat = "identity", fill = "light blue")
# Youtube views by Genre
p7 <- ggplot(data, aes(x=`Genre - Defined`,y=`Youtube Views`))
p7 + geom_bar(stat = "identity", fill = "light blue")
# Mean Budget vs mean box office collection by Genre
p6 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean_Budget = mean(Budget),Mean_Collection = mean(`Box Office Collection`))
View(p6)
ggplot(p6,aes(x=Mean_Budget,y=Mean_Collection,shape=Genre))+
geom_point()
ggplot(p6,aes(x=Mean_Budget,y=Mean_Collection,size=Genre,color=Genre))+
geom_point()
names(data)
p8 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View = `Youtube Likes`/`Youtube Views`)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`)
View(p8)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View <- mean(Like_View))
View(p8)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`)
View(p8)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(LV <- mean(Like_View))
View(p8)
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio <- mean(Like_View))
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(LVR <- mean(Like_View))
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio = mean(Like_View))
ggplot(p5,aes(x=Genre,y=Like_View_Ratio)) + geom_bar(stat = "identity", fill = "light blue")
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio = mean(Like_View))
ggplot(p8,aes(x=Genre,y=Like_View_Ratio)) + geom_bar(stat = "identity", fill = "light blue")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
p1 <- ggplot(data, aes(x=Budget, y=`Box Office Collection`))
p1 + geom_point(aes(color=`Genre - Defined`))
p1 + geom_point(aes(color=`Genre - Defined`, size = `Youtube Views`))
p1 + geom_point(aes(color=`Genre - Defined`, shape = `Release Date (N / LW / Festive)`))
p2 <- ggplot(data, aes(x=`Youtube Views`, y=`Box Office Collection`))
p2 +  geom_point(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p2 +  geom_smooth(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p3 <- ggplot(data, aes(x=`Release Date (N / LW / Festive)`,y=`Box Office Collection`))
p3 +  geom_bar(stat = "identity", aes(fill=`Genre - Defined`))
p3 +  geom_bar(stat = "identity", fill = "light blue")+
facet_grid(`Genre - Defined`~.,scales = "free")+ theme_classic()
# Mean Budget by Genre
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(Budget)) %>% arrange(desc(Mean))
ggplot(p4,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")
# Mean box office collection by Genre
p5 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
ggplot(p5,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")
# Mean Budget vs mean box office collection by Genre
p6 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean_Budget = mean(Budget),Mean_Collection = mean(`Box Office Collection`))
ggplot(p6,aes(x=Mean_Budget,y=Mean_Collection,size=Genre,color=Genre))+
geom_point()
# Youtube views by Genre
p7 <- ggplot(data, aes(x=`Genre - Defined`,y=`Youtube Views`))
p7 + geom_bar(stat = "identity", fill = "light blue")
# Youtube Likes/Views proportion by genre
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio = mean(Like_View))
ggplot(p8,aes(x=Genre,y=Like_View_Ratio)) + geom_bar(stat = "identity", fill = "light blue")
library(ggplot2)
p1 <- ggplot(data, aes(x=Budget, y=`Box Office Collection`))
p1 + geom_point(aes(color=`Genre - Defined`))
p1 + geom_point(aes(color=`Genre - Defined`, size = `Youtube Views`))
p1 + geom_point(aes(color=`Genre - Defined`, shape = `Release Date (N / LW / Festive)`))
p2 <- ggplot(data, aes(x=`Youtube Views`, y=`Box Office Collection`))
p2 +  geom_point(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p2 +  geom_smooth(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p3 <- ggplot(data, aes(x=`Release Date (N / LW / Festive)`,y=`Box Office Collection`))
p3 +  geom_bar(stat = "identity", aes(fill=`Genre - Defined`))
p3 +  geom_bar(stat = "identity", fill = "light blue")+
facet_grid(`Genre - Defined`~.,scales = "free")+ theme_classic()
# Mean Budget by Genre
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(Budget)) %>% arrange(desc(Mean))
ggplot(p4,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean Budget by Genre")
# Mean box office collection by Genre
p5 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
ggplot(p5,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean box office collection by Genre")
# Mean Budget vs mean box office collection by Genre
p6 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean_Budget = mean(Budget),Mean_Collection = mean(`Box Office Collection`))
ggplot(p6,aes(x=Mean_Budget,y=Mean_Collection,size=Genre,color=Genre))+
geom_point()+
ggtitle("Mean Budget vs mean box office collection by Genre")
# Youtube views by Genre
p7 <- ggplot(data, aes(x=`Genre - Defined`,y=`Youtube Views`))
p7 + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Youtube views by Genre")
# Youtube Likes/Views proportion by genre
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio = mean(Like_View))
ggplot(p8,aes(x=Genre,y=Like_View_Ratio)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Youtube Likes/Views proportion by genre")
# Mean Youtube views by Genre
p7 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Youtube Views`)) %>% arrange(desc(Mean))
ggplot(p7,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean Youtube views by Genre")
library(ggplot2)
p1 <- ggplot(data, aes(x=Budget, y=`Box Office Collection`))
p1 + geom_point(aes(color=`Genre - Defined`))
p1 + geom_point(aes(color=`Genre - Defined`, size = `Youtube Views`))
p1 + geom_point(aes(color=`Genre - Defined`, shape = `Release Date (N / LW / Festive)`))
p2 <- ggplot(data, aes(x=`Youtube Views`, y=`Box Office Collection`))
p2 +  geom_point(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p2 +  geom_smooth(aes(color=`Genre - Defined`,size=`Youtube Likes`))
p3 <- ggplot(data, aes(x=`Release Date (N / LW / Festive)`,y=`Box Office Collection`))
p3 +  geom_bar(stat = "identity", aes(fill=`Genre - Defined`))
p3 +  geom_bar(stat = "identity", fill = "light blue")+
facet_grid(`Genre - Defined`~.,scales = "free")+ theme_classic()
# Mean Budget by Genre
p4 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(Budget)) %>% arrange(desc(Mean))
ggplot(p4,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean Budget by Genre")
# Mean box office collection by Genre
p5 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Box Office Collection`)) %>% arrange(desc(Mean))
ggplot(p5,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean box office collection by Genre")
# Mean Budget vs mean box office collection by Genre
p6 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean_Budget = mean(Budget),Mean_Collection = mean(`Box Office Collection`))
ggplot(p6,aes(x=Mean_Budget,y=Mean_Collection,size=Genre,color=Genre))+
geom_point()+
ggtitle("Mean Budget vs mean box office collection by Genre")
# Mean Youtube views by Genre
p7 <- data %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Mean = mean(`Youtube Views`)) %>% arrange(desc(Mean))
ggplot(p7,aes(x=Genre,y=Mean)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Mean Youtube views by Genre")
# Youtube Likes/Views proportion by genre
p8 <- data %>% mutate(Like_View = `Youtube Likes`/`Youtube Views`) %>% group_by(Genre = `Genre - Defined`)%>%
summarize(Like_View_Ratio = mean(Like_View))
ggplot(p8,aes(x=Genre,y=Like_View_Ratio)) + geom_bar(stat = "identity", fill = "light blue")+
ggtitle("Youtube Likes/Views proportion by genre")
