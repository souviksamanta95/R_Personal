ggplot(bs, aes(temp,count))+
geom_point()+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
x <- ggplot(bs, aes(temp,count))
x + geom_point(aes(color=season))+theme_classic()
#CVP
cvp <- bs%>% select(temp,atemp,humidity,windspeed,count)
cvp<-data.frame(cvp)
cvp
# Correlation plotting
#install.packages("corrplot")
library("corrplot")
m <- cor(cvp)
m
cvp_plot <- cor(cvp)
class(cvp_plot)
corrplot(cvp_plot)
corrplot(cvp_plot,method="number") #correlation between the various parameters
# Building models
# Linear univariate model -
lm1 <- lm(count~temp,bs)
summary(lm1)
# Predicting from model -
newdata <- data.frame(temp=c(30,20,10,35))
predict(lm1,newdata)
###################################################################################
# AIR QUALITY DATA -------------------------------------------------------------
###################################################################################
# Write  R code to call the (built-in) dataset airquality.
aq <- airquality
# Check whether it is a data frame or not?
is.data.frame(aq)
# How many records and variables are there in the dataset?
dim(aq)
# Identify the datatypes of each variable.
str(aq)
# Are there any missing values in the data set? If yes, then identify which variable has missing value.
summary(aq)     # Ozone and Solar.R shows NA values, i.e. missing data
# Total number of missing values
sum(is.na(aq))
# Replace the missing values with the mean of the variable. How many values are you replacing for each variable and with what value of mean?
aq$Ozone[is.na(aq$Ozone)] <- mean(aq$Ozone,na.rm = T)
aq$Solar.R[is.na(aq$Solar.R)] <- mean(aq$Solar.R,na.rm = T)
# Identify min, maximum, mean, median standard deviation, variance, and NA values for each variable. Explain each variable with the help of these values.
summary(aq)
# Order the entire data frame by Temp and Wind column.
aq1 <- aq[order(aq$Temp),]
aq2 <- aq[order(aq$Wind),]
aq1
aq2
# Create a new dataframe by removing the variables 'Solar.R' and 'Wind' and display the new data frame.
aq
aq3 <- aq[c(-2,-3)]
aq3
# Write a code to display all the values of temperature variable only.
aq$Temp
aqs <- subset(aq,aq$Month==6&aq$Temp>80)
aqs
###################################################################################
# MISSING VALUE DATA -------------------------------------------------------------
###################################################################################
# R approach of treating missing values -
aq <- airquality
sum(is.na(aq))
# Find out were is the missing data -
sapply(aq, function(x)sum(is.na(x)))
# row wise check how many missing values are there
rowSums(is.na(aq))
# Graphical representation of missing values -
# Libraries - Amelia and Rcpp
library(Amelia)
library(Rcpp)
missmap(aq, main = "Missing Value Map")
# These missing values are to be omitted or replaced by mean, or some specific values
# using Hmisc library for treating missing values-
#install.packages("Hmisc")
library(Hmisc)
# Replacing values approach -
aq$Ozone <- with(aq, impute(Ozone,9)) #Replacing missing values with specific value i.e. 9 (say)
missmap(aq, main = "Missing Value Map")
# Omitting records approach -
aq2 <- airquality
sum(is.na(aq))
dim(aq2)
aq2 <- na.omit(aq2)
dim(aq2) # As some records have been removed, dimension will change
# Identifying outliers and treating them ----
# Visualizing by boxplot ---
library(ggplot2)
boxplot()
###################################################################################
# GGPLOT2 IN DEPTH -------------------------------------------------------------
###################################################################################
#------------ Aesthetics
library(ggplot2)
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
#------------ Geometry
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
#------------ Color
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre)) +
geom_point()
#------------ add size
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=Genre)) +
geom_point()
#------------ add size in a better way
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions)) +
geom_point()
#>>> This is #1 (We will improve it)
p <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
# Points
p + geom_point()
# Lines
p + geom_line()
# Multiple Lines
p + geom_line() + geom_point()
# Overriding Aesthetics
q <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
# ad geom layer
q + geom_point()
#Oveerriding aes
#Ex1
q + geom_point(aes(size=CriticRating))
#Ex2
q + geom_point(aes(color=BudgetMillions))
#Ex3
q + geom_point(aes(x=BudgetMillions)) +
xlab("Budget Millions $$$") # For renaming the axis name from the original q
#Ex4
p + geom_line() + geom_point()
# Reduce line size
p + geom_line(size=1) + geom_point()
# Mapping vs Setting
#Mapping
p + geom_point(aes(color=Genre))
#Setting
p + geom_point(color="DarkGreen")  #We can't put aes for setting
#Error
p + geom_point(aes(color="DarkGreen"))
# Histograms and Density charts
s <- ggplot(data=movies, aes(x=BudgetMillions))
s + geom_histogram(binwidth = 5)
# Add Color
# Setting Color
s + geom_histogram(binwidth = 5, fill="green")
# Mapping Color
s + geom_histogram(binwidth = 5, aes(fill=Genre))
# Adding border to the colors
s + geom_histogram(binwidth = 5, aes(fill=Genre), color="Black")
#>>> 3 (We will improve it)
# Density Charts
s + geom_density(aes(fill=Genre)) # Overlapping
s + geom_density(aes(fill=Genre), position = "stack") # Stacking
# Starting layer tips
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 40,
fill="White", color="blue")
# Another way
t <- ggplot(data=movies)
t + geom_histogram(binwidth = 40,
aes(x=AudienceRating),
fill="White", color="blue")
# Statistical Transformation
u <- ggplot(data=movies, aes(x=CriticRating,
y=AudienceRating, color=Genre))
u + geom_point() + geom_smooth(fill=NA)
# Boxplot
u <- ggplot(data=movies, aes(x=Genre,
y=AudienceRating, color=Genre))
u + geom_boxplot()
u + geom_boxplot(size=1.2)
u + geom_boxplot(size=1.2) + geom_point()
# Trick / hack
u + geom_boxplot(size=1.2) + geom_jitter()
# Another way
u + geom_jitter() + geom_boxplot(size=1.2, alpha=0.5)
# Using facets
v <- ggplot(data=movies, aes(x=BudgetMillions))
v + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")
# Facets
v + geom_histogram(binwidth=10, aes(fill=Genre),
color="black") +
facet_grid(Genre~., scales = "free")
# Scatterplots
w <- ggplot(data=movies, aes(x=CriticRating,
y=AudienceRating, color=Genre))
w + geom_point(size=3)
# Facets
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() +facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +facet_grid(Genre~Year)
# Coordinates : (Limits, Zoom)
m <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions, color=Genre))
m + geom_point()
m + geom_point() +
xlim(50,100) +
ylim(50,100)
#Won't work always
n <- ggplot(data=movies, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")+
ylim(0,50)
#Instead - zoom
n + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")+
coord_cartesian(ylim=c(0,50))
# Improved graph
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +facet_grid(Genre~Year) +
coord_cartesian(ylim = c(0,100))
# Themes
o <- ggplot(data=movies, aes(x=BudgetMillions))
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), color="Black")
h
# Axis Lebel
h +
xlab("Money Axis") +
ylab("Number of Movies")
# lebel formatting
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30) ,
axis.title.y = element_text(color = "darkred", size = 30) )
# Tick mark formatting
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20))
# Legend formatting
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.position = c(1,1),
legend.justification = c(1,1))
# Title to the Plot :
h +
xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution")+
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title = element_text(color = "Darkblue",
size = 40,
family = "courier"))
###################################################################################
# ASSIGNMENT WORK ----------------------------------------------------------------
###################################################################################
# *************************Group Assignment for Group - 11 **********************************
# Question 1 : Importing Data 1 ----------------------------------------------------
library(readxl)
excel_sheets("C:/Users/souvi/Documents/R/IM507/DPA assignment.xlsx")
data1 <- read_excel("C:/Users/souvi/Documents/R/IM507/DPA assignment.xlsx", sheet = "Data1")
# Question 2 : Understanding the data ----------------------------------------------
View(data1)
dim(data1)
names(data1)
class(data1)
summary(data1)
# Question 3 : Structure of the dataset --------------------------------------------
str(data1)
# Question 4 : Conversion for proper datatype --------------------------------------
data1$Education <- factor(data1$Education,levels = c("1","2","3"), labels = c("Undergrad", "Graduate", "Advanced"))
data1$`Securities Account` <- factor(data1$`Securities Account`,levels = c("0","1"), labels = c("Don't Have","Have"))
data1$`CD Account` <- factor(data1$`CD Account`,levels = c("0","1"), labels = c("Don't Have","Have"))
data1$Online <- factor(data1$Online,levels = c("0","1"), labels = c("Don't Have","Have"))
data1$CreditCard <- factor(data1$CreditCard,levels = c("0","1"), labels = c("Don't Have","Have"))
# Question 5 : Joining Data 1 and Data 2 and creating Data 3------------------------
data2 <- read_excel("C:/Users/souvi/Documents/R/IM507/DPA assignment.xlsx", sheet = "Data2")
names(data1)
names(data2)
data3 <- merge(data1,data2, by.x = "ID", by.y = "ID")
View(data3)
# Converting new column to a factor -
data3$`Personal Loan` <- factor(data3$`Personal Loan`,levels = c("0","1"), labels = c("Don't Have","Have"))
# Question 6 : Joining Data 3 and Data 4 and creating Data 5-------------------------
data4 <- read_excel("C:/Users/souvi/Documents/R/IM507/DPA assignment.xlsx", sheet = "Data4")
data4$Education <- factor(data4$Education,levels = c("1","2","3"), labels = c("Undergrad", "Graduate", "Advanced"))
data4$`Securities Account` <- factor(data4$`Securities Account`,levels = c("0","1"), labels = c("Don't Have","Have"))
data4$`CD Account` <- factor(data4$`CD Account`,levels = c("0","1"), labels = c("Don't Have","Have"))
data4$Online <- factor(data4$Online,levels = c("0","1"), labels = c("Don't Have","Have"))
data4$CreditCard <- factor(data4$CreditCard,levels = c("0","1"), labels = c("Don't Have","Have"))
data4$`Personal Loan` <- factor(data4$`Personal Loan`,levels = c("0","1"), labels = c("Don't Have","Have"))
names(data3)
names(data4)
dim(data3)
dim(data4)
data5 <- rbind(data3,data4)
dim(data5)
# Question 7 : Exploration of data5 ----------------------------------------------------
View(data5)
dim(data5)
nrow(data5)
ncol(data5)
names(data5)
class(data5)
str(data5)
summary(data5)
# Question 8 : Check for missing values ------------------------------------------------
# Total missing values in the data frame -
sum(is.na(data5))
# Missing values in variables -
sapply(data5, function(x)sum(is.na(x)))
# Age, CCAvg, Mortgage have missing values
# Replacing missing values by the means of the particular variable -
data5$Age[is.na(data5$Age)] <- mean(data5$Age, na.rm = T)
data5$CCAvg[is.na(data5$CCAvg)] <- mean(data5$CCAvg, na.rm = T)
data5$Mortgage[is.na(data5$Mortgage)] <- mean(data5$Mortgage, na.rm = T)
sum(is.na(data5))
# Question 9 : Creating Age group variable ------------------------------------------
summary(data5$Age)
# Min age = 23 ; max age = 67   Let us take 5 age groups like-
#   Group A : 20+ to <= 30
#   Group B : 30+ to <= 40
#   Group C : 40+ to <= 50
#   Group D : 50+ to <= 60
#   Group E : 60+
data5$Age_group <- cut(data5$Age,c(20,30,40,50,60,Inf),labels = c("A","B","C","D","E"))
# Question 10 : Creating income group variable --------------------------------------
summary(data5$Income)
# Min age = 8 ; max age = 224   Let us take 5 age groups like-
#   Group A : 0 to <= 50
#   Group B : 50+ to <= 100
#   Group C : 100+ to <= 150
#   Group D : 150+ to <= 200
#   Group E : 200+
data5$income_group <- cut(data5$Income,c(0,50,100,150,200,Inf),labels = c("A","B","C","D","E"))
# Question 11 :  Listing customer id, Mortgage details of the customers who belong to age group (61-65), have family size 3 or above, have education level = 3 and have accepted the loan offer
library(dplyr)
data5 %>% filter(Age>=61,Age<=65,Family>=3,Education=="Advanced",`Personal Loan`=="Have") %>% select(ID,Mortgage)
# Question 12 :  Creating a graph to display the distribution of customers based on education level-----------------
library(ggplot2)
ggplot(data5, aes(Education))+
geom_bar(color="black", fill = "light blue") +
xlab("Education Level") +
ylab("Count")+
ggtitle("Distribution of customers based on education level")+
theme_classic()
# Question 13 :  Creating a graph to display the distribution of customers based on income group-----------------
ggplot(data5, aes(income_group))+
geom_bar(color="black", fill = "light blue") +
xlab("Income Group") +
ylab("Count")+
ggtitle("Distribution of customers based on Income Group")+
theme_classic()
# Question 14 :  Creating a graph to display the distribution of customers who accepted or rejected the loan offer based on family size-----------------
ggplot(data5, aes(Family, fill=`Personal Loan`))+
geom_bar(color="black") +
xlab("Family size") +
ylab("Count")+
ggtitle("Distribution of customers accepted loan based on Family size")+
theme_classic()
#--------------------------------------------------------------------------------------------------------------------------------------------------------
###################################################################################
# PROJECT WORK ----------------------------------------------------------------
###################################################################################
# Importing the dataset -----------------------------------------------------------
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
View(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
# No missing values in the raw data. So, initially no need for treatment.
# Analysis of data -----
library(dplyr)
library(tidyr)
# Rearrenging data state wise and year wise
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr <- spread(d_year, key = "State_Name", value = "Total_Production" )
yrr
# yrr shows the missing records, also 2005 has all records. So, let us subset all data of 2005 to analyse crop-wise.
# Subsetting 2005 ---
y_2005 <- d1 %>% filter(Crop_Year==2005)
# Finding out highest produced crop ---
y_2005_crop <- y_2005 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(y_2005_crop)
# Rice is the highest produced crop for 2005. So, let us analyse the data for Rice for all states and crop years.
# Subsetting data for Rice ---
rice <- d1 %>% filter(Crop=="Rice")
# Rearrenging data year and state wise ---
rice_state <- rice %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr_rice <- spread(rice_state, key = "State_Name", value = "Total_Production" )
dim(yrr_rice)
# Check for missing values ---
sum(is.na(yrr_rice))
# Year wise missing values - in the data we can see so many missing values in 2015, so we should remove record for 2015 which is the last row
nrow(yrr_rice)
yrr_rice <- yrr_rice[-19,]
# State wise missing values ---
sapply(yrr_rice, function(x)sum(is.na(x)))
# There are records for 18 years where Andaman Nikobar and Jharkhand has more than 50% missing values
# Removing columns for Andaman Nikobar and Jharkhand
rice_new <- yrr_rice %>% select(-`Andaman and Nicobar Islands`,-Jharkhand)
sum(is.na(rice_new))
sapply(rice_new, function(x)sum(is.na(x)))
# Filling missing values with mean
#install.packages("imputeTS")
library(imputeTS)
rice_new <- na_mean(rice_new)
sum(is.na(rice_new))
# Now, missing values have been treated
# Plotting using ggplot2
library(ggplot2)
# Restructuring the data for further analysis -
rice_str <- gather(rice_new, key = "State_Name", value = "Production",c(-Crop_Year))
# Plotting rice_new (Treated dataset) for further analysis -
# Plotting using ggplot2
# Total production of top 5 states in rice production throughout years -
# Finding out top 5 rice producers -
rice_str %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
# Bihar, Uttar Pradesh, Assam, Odisha, Karnataka are the top 5
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Bihar") +
theme_classic()
# Year-wise rice production for Uttar Pradesh -
rice_str %>% filter(State_Name=="Uttar Pradesh") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Uttar Pradesh") +
theme_classic()
# Year-wise rice production for Assam -
rice_str %>% filter(State_Name=="Assam") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Assam") +
theme_classic()
# Year-wise rice production for Odisha -
rice_str %>% filter(State_Name=="Odisha") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Odisha") +
theme_classic()
# Year-wise rice production for Karnataka -
rice_str %>% filter(State_Name=="Karnataka") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Karnataka") +
theme_classic()
# Finding out top 5 highest produced crops for 2005 and graphically finding its relation to season
# IN 2005 most produced crops are -
head(y_2005_crop)
# Top 5 produced crops are - Rice, Maize, Moong(Green Gram), Sesamum, Urad
# yrr_rice shows that 2004, 2005 has data for all the states. So let us plot for 2004 and 2005
# Finding relation between produced crop with respect to season -
# Production of Rice -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Maize -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Maize") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Moong(Green Gram) -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Moong(Green Gram)") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Urad -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Urad") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
"
