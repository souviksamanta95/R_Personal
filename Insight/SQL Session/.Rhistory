str(bs$windspeed)
# checking missing values :
sum(is.na(bs))
# Boxplotting continuous variables -
boxplot(bs$temp)
boxplot(bs$atemp)
boxplot(bs$humidity)
boxplot(bs$windspeed)
outval <- boxplot.stats(bs$windspeed)$out
outval
length(outval)
hist(outval, labels = T, xlim = c(30,60))
# Using ggplot2
boxplot_windspeed <- ggplot(bs, aes(x=season,y=windspeed,color=season))+
geom_boxplot()+theme_classic()
boxplot_windspeed
library(dplyr)
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
ggplot(bs, aes(temp,count))+
geom_point()+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
x <- ggplot(bs, aes(temp,count))
x + geom_point(aes(color=season))+theme_classic()
#CVP
cvp <- bs%>% select(temp,atemp,humidity,windspeed,count)
cvp<-data.frame(cvp)
cvp
# Correlation plotting
#install.packages("corrplot")
library("corrplot")
m <- cor(cvp)
m
cvp_plot <- cor(cvp)
class(cvp_plot)
corrplot(cvp_plot)
corrplot(cvp_plot,method="number") #correlation between the various parameters
# Building models
# Linear univariate model -
lm1 <- lm(count~temp,bs)
summary(lm1)
# Predicting from model -
newdata <- data.frame(temp=c(30,20,10,35))
predict(lm1,newdata)
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
ggplot(bs,aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
ggplot(bs,aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
cvp
m <- cor(cvp)
View(m)
m
cvp_plot <- cor(cvp)
class(cvp_plot)
corrplot(cvp_plot)
corrplot(cvp_plot,method="number") #correlation between the various parameters
corrplot(cvp_plot)
corrplot(cvp_plot,method="number") #correlation between the various parameters
# Linear univariate model -
lm1 <- lm(count~temp,bs)
summary(lm1)
# Predicting from model -
newdata <- data.frame(temp=c(30,20,10,35))
predict(lm1,newdata)
ggplot(bs, aes(x=season, y=windspeed, fill=factor(month), label = windspeed))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
ggplot(bs, aes(x=season, y=windspeed, fill=factor(month), label = windspeed))+
geom_histogram()+theme_classic() + facet_wrap(~year)
geom_his
ggplot(bs, aes(x=season, y=windspeed, fill=factor(month), label = windspeed))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
ggplot(bs, aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
# No missing values, i.e. no treatment required.
d3 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d4 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
head(d1)
dim(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
d3 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
# Analysis of data -----
library(dplyr)
d3 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d4 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
View(d3)
View(d4)
# Analysis of data -----
library(dplyr)
d3 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d4 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
View(d3)
View(d4)
head(d3)
head(d4)
library(ggplot2)
d2 <- subset(d1,State_Name=="Rajasthan")
p1 <- ggplot(d2, aes(x=Area,y=Production))+
geom_smooth() + theme_classic()
p1 + aes(color=Season)
p2 <- ggplot(d2, aes(x=Production))+
geom_histogram(binwidth = 200, color="black") + theme_classic()
p2 + aes(color=Crop)
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
#View(d1)
dim(d1)
names(d1)
summary(d1)
#View(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
library(ggplot2)
d2 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
d3 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
d11 <- subset(d1,State_Name=="Rajasthan")
View(d1)
d2 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
d3 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
head(d3)
View(d3)
d_state <- d1 %>% arrange(desc(Total = sum(Production)))
d_state <- d1 %>% group_by(State = State_Name) %>% arrange(desc(Total = sum(Production)))
d1 %>% group_by(State = State_Name) %>% arrange(desc(Total = sum(Production)))
d_state <- d1 %>% group_by(State = State_Name) %>% arrange(sum(Production))
d_state <- d1 %>% group_by(State = State_Name)
View(d_state)
View(d1)
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
summarize(Total = sum(Production))# %>%
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
group_by(Year = Crop_Year)
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
group_by(Crop_Year)
d_state <- d1 %>% select(State_Name,Production) %>%
group_by(Year = sum(Crop_Year))
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
group_by(Year = sum(Crop_Year))
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
group_by(Crop_Year)%>%
summarize(Total = sum(Production))
d_state <- d1 %>% select(State_Name,Crop_Year,Production) %>%
group_by(Crop_Year)
d_state <- d1 %>% group_by(Crop_Year)%>%
summarize(Total = sum(Production))
d_state <- d1 %>% group_by(State_Name,Crop_Year)%>%
summarize(Total = sum(Production))
# State > Year > Production
d_state <- d1 %>% group_by(State_Name,Crop_Year)%>%
summarize(Total_Production = sum(Production))
# Year > State > Production
d_state <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
# State > Year > Production
d_state <- d1 %>% group_by(State_Name,Crop_Year)%>%
summarize(Total_Production = sum(Production))
# Year > State > Production
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
View(d_year)
d_1997 <- d_year %>% filter(Crop_Year=1997) %>% select(State_Name,Total_Production)
d_1997 <- d_year %>% filter(Crop_Year==1997) %>% select(State_Name,Total_Production)
d_1997 <- d_year %>% filter(Crop_Year=="1997") %>% select(State_Name,Total_Production)
d_year
# Year in particular > State > Production
str(d_year)
# Year in particular > State > Production
typeof(d_year)
d_year <- data.frame(d_year)
# Year in particular > State > Production
typeof(d_year)
# Year > State > Production
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
# Year in particular > State > Production
typeof(d_year$Crop_Year)
d_1997 <- d_year %>% filter(Crop_Year==1997) %>%
select(State_Name,Total_Production)
View(d_1997)
for (i in 1997:2015)
{
d[i] <- d_year %>% filter(Crop_Year==i) %>%
select(State_Name,Total_Production)
}
for (i in 1997:2015){
d[i] <- d_year %>% filter(Crop_Year==i) %>%
select(State_Name,Total_Production)
}
d <- rep(NA,20)
for (i in 1997:2015){
d[i] <- d_year %>% filter(Crop_Year==i) %>%
select(State_Name,Total_Production)
}
View(d)
aq <- airquality
# For plotting whole dataset
plot(aq)
# Boxplot
boxplot(aq$Ozone)
s<- split(aq, aq$Month)
s
View(s)
lapply(s,function(x){
colMeans(x[,c("Ozone","Wind")],na.rm = T)
})
sapply(s,function(x){
colMeans(x[,c("Ozone","Wind")],na.rm = T)
})
sapply(d_year,Crop_Year)
sapply(d_year,d_year$Crop_Year)
sapply(d_year,d_year$Crop_Year)
colMeans(x[,c("Ozone","Wind")],na.rm = T)
sapply(s,function(x){
colMeans(x[,c("Ozone","Wind")],na.rm = T)
})
?sapply
tapply(aq$Temp,aq$Month,mean)  # Note, variable should be categorical otherwise error will be there
l_year <- split(d_year,d_year$Crop_Year)
View(l_year)
s<- split(aq, aq$Month)
s
typeof(s)
class(s)
lapply(s,function(x){
colMeans(x[,c("Ozone","Wind")],na.rm = T)
})
sapply(s,function(x){
colMeans(x[,c("Ozone","Wind")],na.rm = T)
})
comb <- rbind_list(l_year)
View(comb)
comb <- cbind_list(l_year)
comb <- do.call(cbind, l_year)
comb <- Map(l_year)
library(ggplot2)
p1 <- ggplot(d11, aes(x=Area,y=Production))+
geom_smooth() + theme_classic()
p1 + aes(color=Season)
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
# Bike sharing data from UCI (Local file)
library(readxl)
bs <- read_excel("C:/Users/souvi/Documents/R/IM507/Bike-Sharing-Dataset/DPA assignment.xlsx")
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
# Bike sharing data from UCI (Local file)
library(readxl)
bs <- read_excel("C:/Users/souvi/Documents/R/IM507/Bike-Sharing-Dataset/DPA assignment.xlsx")
#View(bs)
dim(bs)
nrow(bs)
ncol(bs)
names(bs)
class(bs)
str(bs)
summary(bs)
# Most data are factors, but they are in numerical form which needs to be converted to factor
# Changing date as date if it's not automatic...
bs$dteday <- as.Date(bs$datetime, "%d-%m-%y")
typeof(bs$datetime)
# Conversion to factors :
bs$season <- factor(bs$season,levels = c("1","2","3","4"), labels = c("Winter", "Spring", "Summer", "Fall"))
bs$holiday <- factor(bs$holiday,levels = c("0","1"), labels = c("Not Holiday", "Holiday"))
bs$workingday <- factor(bs$workingday, levels = c("0","1"), labels = c("Not workingday", "Workingday"))
bs$weather <- factor(bs$weather, levels = c("1","2","3","4"), labels = c("Clear", "Cloudy", "Light rain", "Heavy rain"))
#View(bs)
table(bs$season)
# Extracting month and year from the date : using **lubridate**
#install.packages("lubridate")
library(lubridate)
bs$month <- month(bs$datetime)
bs$year <- year(bs$datetime)
str(bs)
table(bs$month)
# Converting normal values to actual valuefor temperature :
bs$temp <- bs$temp*41
bs$atemp <- bs$atemp*50
bs$hum <- bs$hum*100
bs$windspeed <- bs$windspeed*67
str(bs$windspeed)
# checking missing values :
sum(is.na(bs))
# Boxplotting continuous variables -
boxplot(bs$temp)
boxplot(bs$atemp)
boxplot(bs$humidity)
boxplot(bs$windspeed)
outval <- boxplot.stats(bs$windspeed)$out
outval
length(outval)
hist(outval, labels = T, xlim = c(30,60))
# Using ggplot2
boxplot_windspeed <- ggplot(bs, aes(x=season,y=windspeed,color=season))+
geom_boxplot()+theme_classic()
boxplot_windspeed
library(dplyr)
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(year)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic()
bs %>%
ggplot(aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
ggplot(bs, aes(x=season, y=windspeed, fill=factor(month)))+
geom_boxplot()+theme_classic() + facet_wrap(~year)
ggplot(bs, aes(temp,count))+
geom_point()+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+theme_classic()
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
x <- ggplot(bs, aes(temp,count))
x + geom_point(aes(color=season))+theme_classic()
#CVP
cvp <- bs%>% select(temp,atemp,humidity,windspeed,count)
cvp<-data.frame(cvp)
cvp
# Correlation plotting
#install.packages("corrplot")
library("corrplot")
m <- cor(cvp)
m
cvp_plot <- cor(cvp)
class(cvp_plot)
corrplot(cvp_plot)
corrplot(cvp_plot,method="number") #correlation between the various parameters
# Building models
# Linear univariate model -
lm1 <- lm(count~temp,bs)
summary(lm1)
# Predicting from model -
newdata <- data.frame(temp=c(30,20,10,35))
predict(lm1,newdata)
ggplot(bs, aes(temp,count))+
geom_point(aes(color=season, shape=season))+
geom_smooth(aes(color=season, fill=season), method = "lm")+theme_classic()
k<-"Ha ha ha!!"
l<-"Ghatiya joke !"
paste(k,l)
m1 <- matrix(1:30, ncol = 5, nrow = 6)
m1
colnames(m1, c("a","b","c","","e"))
colnames(m1, c("a","b","c","d","e"))
l< c("a","b","c","d","e")
l<- c("a","b","c","d","e")
?colnames()
colnames(m1) <- l
m1
l<- c("a","b","c",NA,"e")
colnames(m1) <- l
m1
l<- c("a","b","c",,"e")
l<- c("a","b","c","","e")
colnames(m1) <- l
m1 <- matrix(1:30, ncol = 5, nrow = 6)
m1
l<- c("a","b","c","","e")
colnames(m1) <- l
m1
l<- c("a","b","c","d","e")
l
l[2]
l[-2]
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
#View(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
d2 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
# State > Year > Production
d_state <- d1 %>% group_by(State_Name,Crop_Year)%>%
summarize(Total_Production = sum(Production))
# Year > State > Production
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
l_year <- split(d_year,d_year$Crop_Year)
library(ggplot2)
d11 <- subset(d1,State_Name=="Rajasthan")
p1 <- ggplot(d11, aes(x=Area,y=Production))+
geom_smooth() + theme_classic()
p1 + aes(color=Season)
p2 <- ggplot(d11, aes(x=Production))+
geom_histogram(binwidth = 200, color="black") + theme_classic()
p2 + aes(color=Crop)
View(l_year)
l_year$`1997`
full_join(l_year$`1997`,l_year$`1998`, by = "State_Name")
comb <- full_join(l_year$`1997`,l_year$`1998`, by = "State_Name")
View(comb)
comb <- full_join(l_year$`1997`,l_year$`1998`, by.x = "State_Name")
comb
comb <- full_join(l_year$`1997`,l_year$`1998`, by.y = "State_Name")
comb <- full_join(l_year$`1997`,l_year$`1998`, by.y = "Crop_Year")
comb <- full_join(l_year$`1997`,l_year$`1998`, by = "Crop_Year")
comb <- full_join(l_year$`1997`,l_year$`1998`, by = "State_Name")
comb <- full_join(l_year$`1997`,l_year$`1998`,l_year$`1999`, by = "State_Name")
comb <- full_join(l_year$`1997`,l_year$`1998`,l_year$`1999`, by = "State_Name")
library(tidyr)
yrr <- spread(d_year, Crop_Year)
pollution
yrr <- spread(d_year, key = Crop_Year)
yrr <- spread(d_year, key = "Crop_Year")
yrr <-d_year %>% spread(key = "Crop_Year")
yrr <- spread(d_year, key = "State_Name", value = "Total_Production" )
View(yrr)
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
library(dplyr)
library(tidyr)
d2 <- d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d2)
d3 <- d1 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(d3)
# State > Year > Production
d_state <- d1 %>% group_by(State_Name,Crop_Year)%>%
summarize(Total_Production = sum(Production))
yrr <- spread(d_state, key = "Crop_Year", value = "Total_Production" )
View(yrr)
