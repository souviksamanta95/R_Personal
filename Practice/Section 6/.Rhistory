#legend()
?matplot()
Games
round(MinutesPlayed/Games)
matplot((Games),type="b", pch=15:18, col=c(1:4,6)
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, col=c(1:4,6), horiz=F)
#?matplot()
#legend()
Games
round(MinutesPlayed/Games)
matplot((Games),type="b", pch=15:18, col=c(1:4,6)
#legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, col=c(1:4,6), horiz=F)
#?matplot()
#legend()
Games
round(MinutesPlayed/Games)
matplot((Games),type="b", pch=15:18, col=c(1:4,6))
#legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, col=c(1:4,6), horiz=F)
#?matplot()
#legend()
Games
round(MinutesPlayed/Games)
matplot((Games),type="b", pch=15:18, col=c(1:4,6)
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, col=c(1:4,6), horiz=F)
#?matplot()
#legend()
Games
round(MinutesPlayed/Games)
matplot((Games),type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, col=c(1:4,6), horiz=F)
#?matplot()
#legend()
?paste()
c1 <- "Hello"
c2 <- "World"
paste(c1,c2)
c2 <- "_World"
paste(c1,c2)
?c()
myvect1<- c(12, 34, 2, 686)   # c stands for COMBINE
is.double(myvect1)
myvect2<- c(12L, 45L, 48L, 32L)
is.integer(myvect2)
myvect3<- c("Any", "Thing like", "69", "or something else")
is.character(myvect
myvect3<- c("Any", "Thing like", "69", "or something else")
is.character(myvect3)
# VECTOR indexing in R starts with "1" instead of "0"
?seq()
# Sequence - seq(start,end,interval)
seq(1,23,3)   # seq(1,12) and 1:12 are equivalent
# Replicate - rep(number or "character", times of replication)
rep(7,4)      # 7 will be replicatred 4 times
x <- seq(1,6,2)
y <- rep(x,3)
print(y)
y <- seq(240,260,4)
x <- c(12,34,56,74)     #Combine
# Addition of inequal vectors : R creates elements to make them same length
x+y             #Leaves a warning as size of the bigger one is not multiple of the size of the smaller one
w[2:5]
w <- c("a","b","c","d","e")
w[-2]           # returns the whole vector except the 2nd element
w[2:5]          # retuns elements from 2 to 5
w[c(1,3,4)]     # returns value of 1st, 3rd and 4th elements
w[c(-2,-4)]     # returns elements except 2nd and 4th elements
# Addition of inequal vectors : R creates elements to make them same length
x+y             #Leaves a warning as size of the bigger one is not multiple of the size of the smaller one
k <- c(6,7,8)
k+y             #No warning because size of y is a multiple of size of k, yet k is repeated 3 times
x <- rnorm(5)
x <- rnorm(5)
for(i in 1:5)
{
print(x[i])           # Manual indexing is required for vector or rather array operations
}
for(i in x)
{
print(i)              # vector operation occurs automatically
}
N <- 1000
x <- rnorm(N)
y <- rnorm(N)
c <- x*y
c
N <- 10
x <- rnorm(N)
y <- rnorm(N)
c <- x*y
c
# Vectorized or the R approach
x y
# Vectorized or the R approach
x
y
c <- x*y
c
d <- rep(NA,N)
N <- 10
d <- rep(NA,N)
N <- 10
x <- rnorm(N)
y <- rnorm(N)
d <- rep(NA,N)          # allocating memory with null values for d
for(i in 1:N)
{
x
y
d[i] <- x[i]*y[i]
}
print(d)
d <- rep(NA,N)          # allocating memory with null values for d
for(i in 1:N)
{
print(x)
print(y)
d[i] <- x[i]*y[i]
print(d)
}
d <- rep(NA,N)          # allocating memory with null values for d
for(i in 1:N)
{
print(x)
print(y)
d[i] <- x[i]*y[i]
print(d)
}
d <- rep(NA,N)          # allocating memory with null values for d
for(i in 1:N)
{
print(x[i])
print(y[i])
d[i] <- x[i]*y[i]
print(d[i])
}
# Basic Matrix formation :
my.data <- 1:30
mat <- matrix(my.data, 5, 6)              # By default, matrix is filled up by column
mat
mat <- matrix(my.data, 5, 6, byrow=T)              # By default, matrix is filled up by column
mat
v1 <- 1:6
v2 <- 7:12
v3 <- 13:18
# Matrix by binding ROWS
mat2 <- rbind(v1,v2,v3)
mat2
# Matrix by binding COLUMNS
mat3 <- cbind(v1,v2,v3)
mat3
mat4 <- matrix(1:12, 3, 4)
mat4
?rname
?rownames
?rownames()
rname<- c("r1", "r2", "r3")
cname <- c("c1", "c2", "c3", "c4")
mat4 <- matrix(1:12, 3, 4)
rownames(mat4) <- rname
colnames(mat4) <- cname
mat4["r1","c3"]
mat4
mat4
t(mat4)
mat4[2,"c2"]
vtr <- 4:7
vtr <- 4:7
# To assign names in verctors : names()
vtr <- 4:7
names(vtr) <- c("a", "b", "c", "d")
vtr
vtr["b"]
vtr[3]
data <- read.csv("File=choose")
data <- read.csv("File.choose")
data <- read.csv(File.choose)
data <- read.csv(file.choose())
data
library(ggplot2)
a=c(1,2,3,4)
b=c(3,4,5,6)
a*b
c=a*b
c[2]
c=a[2]*b[3]
c
c
c*b
c
c=a*b
c
c=a*b
b=c(3,4,5,6)a*b
a*b
a=c(1,2,3,4)
b=c(3,4,5,6)
a*b
a=c(1,2,3,4)
b=c(3,4,5,6,7,8,9,10)
a*b
b=c(3,4,5,6,7,8,9,10,11,12)
a=c(1,2,3,4)
b=c(3,4,5,6,7,8,9,10,11,12)
a*b
fn <- function(a,b)
{
a+b
}
fn
fn(1,2)
fn(1,2)
fn <- function(a,b)
{
a-b
}
fn(1,2)
fn <- function(a=0,b=0)
{
a-b
}
fn
fn()
fn <- function(a=0,b=0)
{
a+b
}
fn(3,6)
c[1]
a[1]
a[1,3]
z=c(a[1],a[3])
z
c[-2]
a[-2]
data
summary(data)
str(data)
data <- read.csv(file.choose())
summary(data)
str(data)
library(ggplot2)
ggplot(data=data, aes())
a <- ggplot(data=data, aes(x=Product, y=Rev_Million, color=State))
a + geom_point()
a <- ggplot(data=data, aes(x=Product, y=Rev_Million, fill=State),color="Black")
a + geom_histogram(binwidth = 50)
a <- ggplot(data=data, aes(x=Product, fill=State),color="Black")
a + geom_histogram(binwidth = 50)
a <- ggplot(data=data, aes(x=Product, y=Rev_Million, color=State))
a + geom_point()
a <- ggplot(data=data, aes(x=Product, color=State))
a + geom_point()
a <- ggplot(data=data, aes(x=Product,y=Sub.product, color=State))
a + geom_point()
a <- ggplot(data=data, aes(x=State, y=Product))
a + geom_point()
a <- ggplot(data=data, aes(x=Rev_Million, y=Product, fill=State))
a + geom_histogram()
a <- ggplot(data=data, aes(x=Rev_Million, fill=State))
a + geom_histogram()
a <- ggplot(data=data, aes(x=Rev_Million, fill=State), color="Black")
a + geom_histogram(binwidth = 50)
a + geom_histogram(binwidth = 20)
a <- ggplot(data=data, aes(x=Rev_Million, fill=State), color="Black")
a + geom_histogram(binwidth = 20) +
xlim(0,100)
a <- ggplot(data=data, aes(x=Rev_Million, fill=State), color="Black")
a + geom_histogram(binwidth = 5) +
xlim(0,100)
k <- rnorm(10)
k
getwd()
?getwd()
a=c(1,2,3,4)
a <- ggplot(data=data, aes(x=Rev_Million, fill=State), color="Black")
a + geom_histogram(binwidth = 5) +
xlim(0,100)
rm(k)
b <- ggplot(data=data, aes(x=Rev_Million, fill=State), color="Black")
b + geom_boxplot()
b <- ggplot(data=data, aes(x= State, y=Rev_Million), color="Black")
b + geom_boxplot()
b <- ggplot(data=data, aes(x= State, y=Rev_Million, color=Product), color="Black")
b + geom_boxplot()+ylim(0,100)
getwd
getwd()
setwd("C:/Users/souvi/Documents/R/IM507")
getwd()
getwd()
getwd()
setwd("C:\\Users\\souvi\\Documents\\R\\Practice\\Section 6")
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
head(movies)
colnames(movies) <- c("Film","Genre","CriticRating","AudienceRating","BudgetMillions","Year")
tail(movies, n=7)
str(movies)
summary(movies)
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
str(movies)
a<-5
typeof(a)
a<-5L
typeof(a)
a<-5L
a<-5
typeof(a)
library(ggplot2)
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=Genre)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions)) +
geom_point()
p <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
# Points
p + geom_point()
# Lines
p + geom_line()
# Multiple Lines
p + geom_line() + geom_point()
q <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
q + geom_point()
#Oveerriding aes
#Ex1
q + geom_point(aes(size=CriticRating))
q + geom_point(aes(color=BudgetMillions))
q + geom_point(aes(x=BudgetMillions)) +
xlab("Budget Millions $$$") # For renaming the axis name from the original q
p + geom_line() + geom_point()
p + geom_line(size=1) + geom_point()
p + geom_line(size=12) + geom_point()
p + geom_line(size=0.6) + geom_point()
#Mapping
p + geom_point(aes(color=Genre))
#Setting
p + geom_point(color="DarkGreen")  #We can't put aes for setting
#Error
p + geom_point(aes(color="DarkGreen"))
#Setting
p + geom_point(color="DarkGreen")  #We can't put aes for setting
#Error
p + geom_point(aes(color="DarkGreen"))
s <- ggplot(data=movies, aes(x=BudgetMillions))
s + geom_histogram(binwidth = 5)
# Add Color
# Setting Color
s + geom_histogram(binwidth = 5, fill="green")
# Mapping Color
s + geom_histogram(binwidth = 5, aes(fill=Genre))
s + geom_histogram(binwidth = 5, aes(fill=Genre), color="Black")
# Density Charts
s + geom_density(aes(fill=Genre)) # Overlapping
s + geom_density(aes(fill=Genre), position = "stack") # Stacking
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 40,
fill="White", color="blue")
# Another way
t <- ggplot(data=movies)
t + geom_histogram(binwidth = 40,
aes(x=AudienceRating),
fill="White", color="blue")
u <- ggplot(data=movies, aes(x=CriticRating,
y=AudienceRating, color=Genre))
u + geom_point() + geom_smooth(fill=NA)
u <- ggplot(data=movies, aes(x=Genre,
y=AudienceRating, color=Genre))
u + geom_boxplot()
u + geom_boxplot(size=1.2)
u + geom_boxplot(size=1.2) + geom_point()
u + geom_boxplot(size=1.2) + geom_jitter()
u + geom_boxplot(size=1.2) + geom_jitter()
u + geom_jitter() + geom_boxplot(size=1.2, alpha=0.5)
b<-%%(-5)
B
B
b
b<-%(-5)%
b
b<--6
%%b
%b%
u + geom_jitter() + geom_boxplot(size=1.2)#, alpha=0.5)
u + geom_jitter() + geom_boxplot(size=1.2, alpha=0.1)
u + geom_jitter() + geom_boxplot(size=1.2, alpha=0.9)
u + geom_jitter() + geom_boxplot(size=1.2, alpha=0.5)
v <- ggplot(data=movies, aes(x=BudgetMillions))
v + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")
# Facets
v + geom_histogram(binwidth=10, aes(fill=Genre),
color="black") +
facet_grid(Genre~., scales = "free")
w <- ggplot(data=movies, aes(x=CriticRating,
y=AudienceRating, color=Genre))
w + geom_point(size=3)
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
a%%b
a<-50
typeof(a)
b<--6
a%%b
b<-6
a%%b
x<-2
y<-6*x^2+5*x+2
y
x<-2
y<-3
z<-(((x+y)^2)/2)^0.5
z
w <- ggplot(data=movies, aes(x=CriticRating,
y=AudienceRating, color=Genre))
w + geom_point(size=3)
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() +facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +facet_grid(Genre~Year)
m <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions, color=Genre))
m + geom_point()
m + geom_point() +
xlim(50,100) +
ylim(50,100)
n <- ggplot(data=movies, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")+
ylim(0,50)
#Instead - zoom
n + geom_histogram(binwidth=10, aes(fill=Genre),
color="black")+
coord_cartesian(ylim=c(0,50))
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +facet_grid(Genre~Year) +
coord_cartesian(ylim = c(0,100))
o <- ggplot(data=movies, aes(x=BudgetMillions))
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), color="Black")
h
h +
xlab("Money Axis") +
ylab("Number of Movies")
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30) ,
axis.title.y = element_text(color = "darkred", size = 30) )
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20))
h +
xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.position = c(1,1),
legend.justification = c(1,1))
h +
xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution")+
theme(axis.title.x = element_text(color = "darkgreen", size = 30),
axis.title.y = element_text(color = "darkred", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title = element_text(color = "Darkblue",
size = 40,
family = "courier"))
k<-"Ha ha ha!!"
k
l<-"Ghatiya joke !"
k+l
c(k,l)
d1<-as.date("2018-11-14")
d1<-as.date("2018-11-10")
d1<-as.Date("2018-11-10")
a<- readline(prompt = "Enter a: ")
a
a<- readline(prompt = "Enter a: ")
a
a<- as.integer(readline(prompt = "Enter a: "))
a
paste(k,l)
k<-"Ha ha ha!!"
l<-"Ghatiya joke !"
paste(k,l)
