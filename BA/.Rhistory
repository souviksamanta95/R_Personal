names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
library(tidyr)
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr <- spread(d_year, key = "State_Name", value = "Total_Production" )
y_2005 <- d1 %>% filter(Crop_Year==2005)
y_2005_crop <- y_2005 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(y_2005_crop)
rice <- d1 %>% filter(Crop=="Rice")
rice_state <- rice %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr_rice <- spread(rice_state, key = "State_Name", value = "Total_Production" )
dim(yrr_rice)
sum(is.na(yrr_rice))
View(yrr_rice)
View(d1)
y_2010 <- d1 %>% filter(Crop_Year==2010)
View(y_2010)
# For 2005 -
p1 <- ggplot(y_2005, aes(x=Area,y=Production))+
geom_point() + theme_classic()
p1 + aes(color=Season)
# For 2005 -
p1 <- ggplot(rice_new, aes(x=Area,y=Production))+
geom_point() + theme_classic()
p1 + aes(color=Season)
# For 2005 -
p1 <- ggplot(rice, aes(x=Area,y=Production))+
geom_point() + theme_classic()
p1 + aes(color=Season)
# For 2005 -
p1 <- ggplot(rice, aes(Production))+
geom_bar() + theme_classic()
p1 + aes(color=Season)
# For 2005 -
p1 <- ggplot(rice, aes(Production))+
geom_histogram() + theme_classic()
p1 + aes(color=Season)
p1 + aes(fill()=Season)
p1 + aes(fill=Season)
# For 2005 -
p1 <- ggplot(rice, aes(Production))+
geom_histogram(color=black) + theme_classic()
p1 + aes(fill=Season)
# For 2005 -
p1 <- ggplot(rice, aes(Production))+
geom_histogram(color="black") + theme_classic()
p1 + aes(fill=Season)
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(rice, aes(Production))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production),fill=Season)+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production),fill=Season)+
geom_histogram(color="black") + theme_classic()
p1 <- d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black") + theme_classic()
p1 + aes(fill=Season)
d1 %>% filter(Crop_Year==2005,Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()
d1 %>% filter(Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
d1 %>% filter(Crop_Year==c(2005,2006),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
d1 %>% filter(Crop_Year==c(2005,2006,2007),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
head(y_2005_crop)
d1 %>% filter(Crop_Year==c(2005,2006,2007,2008),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Moong(Green Gram) -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Moong(Green Gram)") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Rice -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Maize -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Maize") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Moong(Green Gram) -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Moong(Green Gram)") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Urad -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Urad") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Rice -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Rice") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Maize -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Maize") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Moong(Green Gram) -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Moong(Green Gram)") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
# Production of Urad -
d1 %>% filter(Crop_Year==c(2004,2005),Crop=="Urad") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(Crop_Year~., scales = "free")
d1 %>% filter(Crop_Year==2005,State_Name=="Andhra Pradesh") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(District_Name~., scales = "free")
d1 %>% filter(Crop_Year==2005,State_Name=="Andhra Pradesh") %>%
ggplot(aes(Production))+
geom_bar(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(District_Name~., scales = "free")
d1 %>% filter(Crop_Year==2005,State_Name=="Andhra Pradesh") %>%
ggplot(aes(Production))+
geom_bar(color="black",aes(fill=Season)) + theme_classic()
d1 %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d1 %>% group_by(State = State_Name,Crop=="Rice") %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d1 %>% filter(,Crop=="Rice") %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d1 %>% filter(Crop=="Rice") %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=Season)) + theme_classic()+
facet_grid(District_Name~., scales = "free")
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production))+
geom_histogram(color="black",aes(fill=District_Name)) + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production, District_Name))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=District_Name))+
geom_histogram(color="black") + theme_classic()
ggplot(aes(x=Production, y=factor(District_Name))+
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=factor(District_Name)))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=as.factor(District_Name)))+
geom_histogram(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=as.factor(District_Name)))+
geom_point(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=as.factor(District_Name)))+
geom_line(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=Production, y=as.factor(District_Name)))+
geom_smooth(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(y=Production, x=as.factor(District_Name)))+
geom_smooth(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(y=Production, x=as.factor(District_Name)))+
geom_bar(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(y=Production, x=District_Name))+
geom_bar(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production))+
geom_bar(color="black") + theme_classic()
class(d1$District_Name)
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=factor(District_Name),y=Production))+
geom_bar(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=factor(District_Name),y=Production))+
geom_area(color="black") + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(x=factor(District_Name),y=Production))+
geom_area() + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production))+
geom_area() + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production,count))+
geom_area() + theme_classic()
d1 %>% filter(Crop_Year==2005,Crop=="Rice",State_Name=="Bihar") %>%
ggplot(aes(Production))+
geom_bar() + theme_classic()
plot(rice_new)
sum(is.na(yrr_rice))
# Year wise missing values - in the data we can see so many missing values in 2015, so we should remove record for 2015 which is the last row
nrow(yrr_rice)
yrr_rice <- yrr_rice[-19,]
# State wise missing values ---
sapply(yrr_rice, function(x)sum(is.na(x)))
rice_new <- yrr_rice %>% select(-`Andaman and Nicobar Islands`,-Jharkhand)
sum(is.na(rice_new))
sapply(rice_new, function(x)sum(is.na(x)))
library(imputeTS)
rice_new <- na_mean(rice_new)
sum(is.na(rice_new))
plot(rice_new)
plot(rice_new)
?spread
?gather
rice_str <- gather(rice_new, key = "State_Name", value = "Total_Production" )
rice_str
View(rice_str)
rice_str <- gather(rice_new, key = "Year", value = "Total_Production",c(-State_Name) )
rice_str <- gather(rice_new, key = "Year", value = "Total_Production",c(-Crop_Year))
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=factor(Total_Production)))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production)+
ggplot(rice_str, aes(Total_Production))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production))+
geom_histogram(color="black") + theme_classic()
rice_str <- gather(rice_new, key = "State_Name", value = "Total_Production",c(-Crop_Year))
ggplot(rice_str, aes(Total_Production,Crop_Year))+
geom_histogram(color="black") + theme_classic()
ggplot(rice_str, aes(Total_Production,Crop_Year))+
geom_step(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_step(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=Total_Production,size = Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=sum(Total_Production)))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name))+
geom_bar(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production))+
geom_point(color="black") + theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production, color = State_Name))+
geom_point() + theme_classic()
rice_str %>% filter(Crop=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_point() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_point() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Total_Production, color=Crop_Year))+
geom_bar() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(x=Crop_Year,y=Total_Production))+
geom_bar() + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(x=Crop_Year,y=Total_Production))+
geom_bar(stat=identify()) + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Total_Production))+
geom_bar(stat="identify") + theme_classic()
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Total_Production))+
geom_bar(stat="identity") + theme_classic()
rice_str <- gather(rice_new, key = "State_Name", value = "Production",c(-Crop_Year))
rice_str %>% group_by(State = State_Name) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "blue") + theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") + theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Bihar") +
theme_classic()
# Year-wise rice production for Bihar -
rice_str %>% filter(State_Name=="Bihar") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Bihar") +
theme_classic()
# Year-wise rice production for Uttar Pradesh -
rice_str %>% filter(State_Name=="Uttar Pradesh") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Uttar Pradesh") +
theme_classic()
# Year-wise rice production for Assam -
rice_str %>% filter(State_Name=="Assam") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Assam") +
theme_classic()
# Year-wise rice production for Odisha -
rice_str %>% filter(State_Name=="Odisha") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Odisha") +
theme_classic()
# Year-wise rice production for Karnataka -
rice_str %>% filter(State_Name=="Karnataka") %>%
ggplot(aes(Crop_Year,Production))+
geom_bar(stat="identity", color="black", fill = "light blue") +
ggtitle("Year-wise rice production for Karnataka") +
theme_classic()
ggplot(rice_str, aes(x=Crop_Year,y=State_Name, size=Total_Production, color = State_Name))+
geom_point() + theme_classic()
d1 <- read.csv("C:/Users/souvi/Documents/R/IM507/apy.csv")
#View(d1)
head(d1)
dim(d1)
names(d1)
summary(d1)
str(d1)
class(d1$Production)
# Class of Production has been taken as factor which needs to be converted to double
d1$Production <- as.double(d1$Production)
str(d1)
class(d1$Production)
typeof(d1$Production)
#Check for missing values -----
sum(is.na(d1))
library(dplyr)
library(tidyr)
d_year <- d1 %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr <- spread(d_year, key = "State_Name", value = "Total_Production" )
y_2005 <- d1 %>% filter(Crop_Year==2005)
y_2005 <- d1 %>% filter(Crop_Year==2005)
y_2005_crop <- y_2005 %>% group_by(Crop = Crop) %>%
summarize(Total = sum(Production)) %>% arrange(desc(Total))
head(y_2005_crop)
rice <- d1 %>% filter(Crop=="Rice")
rice_state <- rice %>% group_by(Crop_Year,State_Name)%>%
summarize(Total_Production = sum(Production))
yrr_rice <- spread(rice_state, key = "State_Name", value = "Total_Production" )
dim(yrr_rice)
sum(is.na(yrr_rice))
# Year wise missing values - in the data we can see so many missing values in 2015, so we should remove record for 2015 which is the last row
nrow(yrr_rice)
yrr_rice <- yrr_rice[-19,]
# State wise missing values ---
sapply(yrr_rice, function(x)sum(is.na(x)))
rice_new <- yrr_rice %>% select(-`Andaman and Nicobar Islands`,-Jharkhand)
sum(is.na(rice_new))
sapply(rice_new, function(x)sum(is.na(x)))
library(imputeTS)
rice_new <- na_mean(rice_new)
sum(is.na(rice_new))
library(ggplot2)
rice_str <- gather(rice_new, key = "State_Name", value = "Production",c(-Crop_Year))
View(y_2005)
getwd()
setwd("C:/Users/souvi/Documents/R/BA")
library(sqldf)
# Clean environment
rm(list=ls())
CAS <-read.csv("CAS.csv")
APAC <-read.csv("APAC.csv")
CAS <-read.csv("CAS.csv")
APAC <-read.csv("APAC.csv")
CAS <-sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )"))
View(CAS)
create database learnsql
createdatabase learnsql
CREATEDATABASE learnsql
CREATEDATABASE learnsql;
sqldf("create database learnsql")
sqldf("createdatabase learnsql")
sqldf("CREATE DATABASE learnsql;")
sqldf("CREATE DATABASE learnsql")
sqldf("CREATEDATABASE learnsql")
CAS <-sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )"))
sqldf("drop table CAS")
sqldf("drop table (CAS)")
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )","select * from CAS"))
CAS <- sqldf("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)")
#Referencing the sqld£ library
library(sqldf)
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )","select * from CAS"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )","select * from CAS"))
sqldf("drop table CAS")
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )","select * from CAS"))
View(CAS)
CAS <- sqldf("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)")
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )
","select * from CAS"))
APAC <- sqldf(c("create table APAC(CM11, AS_OF_DT, ACCOUNT_TENURE, AGE_CD, NET_SEPNDING_AMT)",
"insert into APAC values(38287840521, '2019-01-01',37,1,1314.69)", "Select * from APAC"))
View(APAC)
# Clean environment
rm(list=ls())
#supress warnings
options(warn=-1)
#Referencing the sqld£ library
library(sqldf)
sqldf("CREATE DATABASE learnsql")
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )
","select * from CAS"))
APAC <- sqldf(c("create table APAC(CM11, AS_OF_DT, ACCOUNT_TENURE, AGE_CD, NET_SEPNDING_AMT)",
"insert into APAC values(38287840521, '2019-01-01',37,1,1314.69)", "Select * from APAC"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O', 0 )
","select * from CAS"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2. 86, 0,'O',0),
(305643187411008, 'US', '2019-01-02', 546.08, 0, 'O', 0)
","select * from CAS"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2.86, 0,'O',0),
(305643187411008, 'US', '2019-01-02', 546.08, 0, 'O', 0)
","select * from CAS"))
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2.86, 0,'O',0),
(305643187411008, 'US', '2019-01-02', 546.08, 0, 'O', 0),
(305647361311008, 'US', '2019-01-23', 53.08, 0, 'M', 0),
(305643565727866, 'US', '2019-01-13', 6.08, 0, 'O', 7),
(305643197637472, 'US', '2019-01-21', 56.08, 0, 'O', 0),
(305643172257864, 'US', '2019-01-22', 46.08, 0, 'M', 2),
(305643890567214, 'US', '2019-01-01', 65.08, 0, 'O', 0),
(303572475868455, 'US', '2019-01-15', 35.08, 0, 'O', 0),
(305656765738356, 'US', '2019-01-18', 635.08, 0, 'O', 0)
","select * from CAS"))
# Clean environment
rm(list=ls())
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNITRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2.86, 0,'O',0),
(305643187411008, 'US', '2019-01-02', 546.08, 0, 'O', 0),
(305647361311008, 'US', '2019-01-23', 53.08, 0, 'M', 0),
(305643565727866, 'US', '2019-01-13', 6.08, 0, 'O', 7),
(305643197637472, 'US', '2019-01-21', 56.08, 0, 'O', 0),
(305643172257864, 'US', '2019-01-22', 46.08, 0, 'M', 2),
(305643890567214, 'US', '2019-01-01', 65.08, 0, 'O', 0),
(303572475868455, 'US', '2019-01-15', 35.08, 0, 'O', 0),
(305656765738356, 'US', '2019-01-18', 635.08, 0, 'O', 0)
","select * from CAS"))
# Clean environment
rm(list=ls())
CAS <- sqldf(c("create table CAS(CM15 varchar, COUNTRY_CD char, TRANS_DT date, AMOUNT float, APPR_DENY_CD smallint, PRODUCT_TYP char, ONE_EXPSR_AGE smallint)",
"insert into CAS values(398552711774003, 'US', '2019-01-28', 2.86, 0,'O',0),
(305643187411008, 'US', '2019-01-02', 546.08, 0, 'O', 0),
(305647361311008, 'US', '2019-01-23', 53.08, 0, 'M', 0),
(305643565727866, 'US', '2019-01-13', 6.08, 0, 'O', 7),
(305643197637472, 'US', '2019-01-21', 56.08, 0, 'O', 0),
(305643172257864, 'US', '2019-01-22', 46.08, 0, 'M', 2),
(305643890567214, 'US', '2019-01-01', 65.08, 0, 'O', 0),
(303572475868455, 'US', '2019-01-15', 35.08, 0, 'O', 0),
(305656765738356, 'US', '2019-01-18', 635.08, 0, 'O', 0)
","select * from CAS"))
sqldf("select CM15,COUNTRY_CD,TRANS_DT,AMOUNT from CAS where TRANS_DT = '2019-01-01' and COUNTRY_CD = 'US' order by AMOUNT desc")
sqldf("select CM15,COUNTRY_CD,TRANS_DT,AMOUNT from CAS where TRANS_DT = '2019-01-01' and COUNTRY_CD like 'A%' order by AMOUNT desc")
sqldf("select CM15,COUNTRY_CD,TRANS_DT,AMOUNT from CAS where TRANS_DT = '2019-01-01' and COUNTRY_CD like 'U%' order by AMOUNT desc")
sqldf("select CM15,COUNTRY_CD,TRANS_DT,max(AMOUNT) as MAX_SPND from CAS where APPR_DENY_CD = 'o' and COUNTRY_CD = 'US' group by PRODUCT_TYP")
